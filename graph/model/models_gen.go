// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

// Represents a bank
type Bank struct {
	ID        string  `json:"id"`
	UserID    string  `json:"userId"`
	Name      string  `json:"name"`
	CreatedAt *string `json:"createdAt,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

type BankAccount struct {
	ID           string  `json:"id"`
	UserID       string  `json:"userId"`
	BankID       string  `json:"bankId"`
	AccountID    string  `json:"accountId"`
	Type         string  `json:"type"`
	Balance      float64 `json:"balance"`
	CurrencyCode string  `json:"currencyCode"`
	CreatedAt    *string `json:"createdAt,omitempty"`
	UpdatedAt    *string `json:"updatedAt,omitempty"`
}

// Represents bank data
type BankData struct {
	ID                           string   `json:"id"`
	BankAccountID                string   `json:"bankAccountId"`
	TransferNumber               *string  `json:"transferNumber,omitempty"`
	ClosingBalance               *float64 `json:"closingBalance,omitempty"`
	AutomaticallyInvestedBalance *float64 `json:"automaticallyInvestedBalance,omitempty"`
	OverdraftContractedLimit     *float64 `json:"overdraftContractedLimit,omitempty"`
	OverdraftUsedLimit           *float64 `json:"overdraftUsedLimit,omitempty"`
	UnarrangedOverdraftAmount    *float64 `json:"unarrangedOverdraftAmount,omitempty"`
	CreatedAt                    *string  `json:"createdAt,omitempty"`
	UpdatedAt                    *string  `json:"updatedAt,omitempty"`
}

// Represents a bank item
type BankItem struct {
	ID              string  `json:"id"`
	BankID          string  `json:"bankId"`
	Name            string  `json:"name"`
	Status          *string `json:"status,omitempty"`
	ExecutionStatus *string `json:"executionStatus,omitempty"`
	CreatedAt       *string `json:"createdAt,omitempty"`
	UpdatedAt       *string `json:"updatedAt,omitempty"`
}

// Input for creating a new task
type CreateTaskInput struct {
	Name        string            `json:"name"`
	Description *string           `json:"description,omitempty"`
	Parameters  []*ParameterInput `json:"parameters,omitempty"`
}

// Input for creating a workflow
type CreateWorkflowInput struct {
	Name        string   `json:"name"`
	Description *string  `json:"description,omitempty"`
	TaskIds     []string `json:"taskIds"`
}

// The root mutation type
type Mutation struct {
}

// Represents a parameter for a task
type Parameter struct {
	Key   string        `json:"key"`
	Value string        `json:"value"`
	Type  ParameterType `json:"type"`
}

// Input for task parameters
type ParameterInput struct {
	Key   string        `json:"key"`
	Value string        `json:"value"`
	Type  ParameterType `json:"type"`
}

// Represents a product
type Product struct {
	ID         string  `json:"id"`
	BankItemID string  `json:"bankItemId"`
	Name       string  `json:"name"`
	CreatedAt  *string `json:"createdAt,omitempty"`
	UpdatedAt  *string `json:"updatedAt,omitempty"`
}

// The root query type
type Query struct {
}

// Subscription for real-time updates
type Subscription struct {
}

// Represents a task in the automation system
type Task struct {
	ID          string     `json:"id"`
	Name        string     `json:"name"`
	Description *string    `json:"description,omitempty"`
	Status      TaskStatus `json:"status"`
	CreatedAt   string     `json:"createdAt"`
}

// Represents a transaction
type Transaction struct {
	ID              string  `json:"id"`
	BankID          string  `json:"bankId"`
	Type            string  `json:"type"`
	Amount          float64 `json:"amount"`
	Currency        string  `json:"currency"`
	Description     *string `json:"description,omitempty"`
	TransactionDate *string `json:"transactionDate,omitempty"`
	CreatedAt       *string `json:"createdAt,omitempty"`
	UpdatedAt       *string `json:"updatedAt,omitempty"`
}

// Input for updating a task
type UpdateTaskInput struct {
	ID          string            `json:"id"`
	Name        *string           `json:"name,omitempty"`
	Description *string           `json:"description,omitempty"`
	Status      *TaskStatus       `json:"status,omitempty"`
	Parameters  []*ParameterInput `json:"parameters,omitempty"`
}

type User struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Email       string  `json:"email"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	CreatedAt   *string `json:"createdAt,omitempty"`
	UpdatedAt   *string `json:"updatedAt,omitempty"`
}

// Automation workflow
type Workflow struct {
	ID          string         `json:"id"`
	Name        string         `json:"name"`
	Description *string        `json:"description,omitempty"`
	Tasks       []*Task        `json:"tasks"`
	Status      WorkflowStatus `json:"status"`
	CreatedAt   string         `json:"createdAt"`
	UpdatedAt   string         `json:"updatedAt"`
}

// Types of parameters
type ParameterType string

const (
	ParameterTypeString  ParameterType = "STRING"
	ParameterTypeNumber  ParameterType = "NUMBER"
	ParameterTypeBoolean ParameterType = "BOOLEAN"
	ParameterTypeJSON    ParameterType = "JSON"
)

var AllParameterType = []ParameterType{
	ParameterTypeString,
	ParameterTypeNumber,
	ParameterTypeBoolean,
	ParameterTypeJSON,
}

func (e ParameterType) IsValid() bool {
	switch e {
	case ParameterTypeString, ParameterTypeNumber, ParameterTypeBoolean, ParameterTypeJSON:
		return true
	}
	return false
}

func (e ParameterType) String() string {
	return string(e)
}

func (e *ParameterType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ParameterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ParameterType", str)
	}
	return nil
}

func (e ParameterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ParameterType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ParameterType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Possible statuses for a task
type TaskStatus string

const (
	TaskStatusPending   TaskStatus = "PENDING"
	TaskStatusRunning   TaskStatus = "RUNNING"
	TaskStatusCompleted TaskStatus = "COMPLETED"
	TaskStatusFailed    TaskStatus = "FAILED"
	TaskStatusCancelled TaskStatus = "CANCELLED"
)

var AllTaskStatus = []TaskStatus{
	TaskStatusPending,
	TaskStatusRunning,
	TaskStatusCompleted,
	TaskStatusFailed,
	TaskStatusCancelled,
}

func (e TaskStatus) IsValid() bool {
	switch e {
	case TaskStatusPending, TaskStatusRunning, TaskStatusCompleted, TaskStatusFailed, TaskStatusCancelled:
		return true
	}
	return false
}

func (e TaskStatus) String() string {
	return string(e)
}

func (e *TaskStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskStatus", str)
	}
	return nil
}

func (e TaskStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *TaskStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e TaskStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Workflow status
type WorkflowStatus string

const (
	WorkflowStatusDraft     WorkflowStatus = "DRAFT"
	WorkflowStatusActive    WorkflowStatus = "ACTIVE"
	WorkflowStatusPaused    WorkflowStatus = "PAUSED"
	WorkflowStatusCompleted WorkflowStatus = "COMPLETED"
	WorkflowStatusFailed    WorkflowStatus = "FAILED"
)

var AllWorkflowStatus = []WorkflowStatus{
	WorkflowStatusDraft,
	WorkflowStatusActive,
	WorkflowStatusPaused,
	WorkflowStatusCompleted,
	WorkflowStatusFailed,
}

func (e WorkflowStatus) IsValid() bool {
	switch e {
	case WorkflowStatusDraft, WorkflowStatusActive, WorkflowStatusPaused, WorkflowStatusCompleted, WorkflowStatusFailed:
		return true
	}
	return false
}

func (e WorkflowStatus) String() string {
	return string(e)
}

func (e *WorkflowStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WorkflowStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WorkflowStatus", str)
	}
	return nil
}

func (e WorkflowStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *WorkflowStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e WorkflowStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
