# Automation Hub Core GraphQL Schema


"""
Represents a bank
"""
type Bank {
  id: ID!
  userId: ID!
  name: String!
  createdAt: String
  updatedAt: String
}

"""
Represents a task in the automation system
"""
type Task {
  id: ID!
  name: String!
  description: String
  status: TaskStatus!
  createdAt: String!
}

type BankAccount {
  id: ID!
  userId: ID!
  bankId: ID!
  accountId: String!
  type: String!
  balance: Float!
  currencyCode: String!
  createdAt: String
  updatedAt: String
}

"""
Possible statuses for a task
"""
enum TaskStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

"""

Represents a parameter for a task
"""

type Parameter {
  key: String!
  value: String!
  type: ParameterType!

}

"""
Types of parameters
"""
enum ParameterType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

"""
Input for creating a new task
"""
input CreateTaskInput {
  name: String!
  description: String
  parameters: [ParameterInput!]
}

"""
Input for task parameters
"""
input ParameterInput {
  key: String!
  value: String!
  type: ParameterType!
}


"""
Represents a bank item
"""
type BankItem {
  id: ID!
  bankId: ID!
  name: String!
  status: String
  executionStatus: String
  createdAt: String
  updatedAt: String
}

"""
Represents bank data
"""
type BankData {
  id: ID!
  bankAccountId: ID!
  transferNumber: String
  closingBalance: Float
  automaticallyInvestedBalance: Float
  overdraftContractedLimit: Float
  overdraftUsedLimit: Float
  unarrangedOverdraftAmount: Float
  createdAt: String
  updatedAt: String
}

"""
Represents a transaction
"""
type Transaction {
  id: ID!
  bankId: ID!
  type: String!
  amount: Float!
  currency: String!
  description: String
  transactionDate: String
  createdAt: String
  updatedAt: String
}

"""
Automation workflow
"""
type Workflow {
  id: ID!
  name: String!
  description: String
  tasks: [Task!]!
  status: WorkflowStatus!
  createdAt: String!
  updatedAt: String!
}

"""
Workflow status
"""
enum WorkflowStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  FAILED
}

"""
Input for creating a workflow
"""
input CreateWorkflowInput {
  name: String!
  description: String
  taskIds: [ID!]!
}

"""
Represents a product
"""
type Product {
  id: ID!
  bankItemId: ID!
  name: String!
  createdAt: String
  updatedAt: String
}

"""
The root query type
"""
type Query {
  """
  Get all tasks
  """
  tasks: [Task!]!
  users: [User!]!
  banks: [Bank!]!
  bankAccounts: [BankAccount!]!
  transactions: [Transaction!]!
  bankData: [BankData!]!
  bankItems: [BankItem!]!
  products: [Product!]!
}

"""
Input for updating a task
"""
input UpdateTaskInput {
  id: ID!
  name: String
  description: String
  status: TaskStatus
  parameters: [ParameterInput!]
}

"""
The root mutation type
"""
type Mutation {
  """
  Create a new task
  """
  createTask(input: CreateTaskInput!): Task!
  
  """
  Update an existing task
  """
  updateTask(input: UpdateTaskInput!): Task!
  
  """
  Delete a task
  """
  deleteTask(id: ID!): Boolean!
  
  """
  Execute a task
  """
  executeTask(id: ID!): Task!
  
  """
  Create a new workflow
  """
  createWorkflow(input: CreateWorkflowInput!): Workflow!
  
  """
  Execute a workflow
  """
  executeWorkflow(id: ID!): Workflow!
}

"""
Subscription for real-time updates
"""
type Subscription {
  """
  Subscribe to task status changes
  """
  taskStatusChanged(taskId: ID): Task!
  
  """
  Subscribe to workflow status changes
  """
  workflowStatusChanged(workflowId: ID): Workflow!
}

type User {
  id: ID!
  name: String!
  email: String!
  phoneNumber: String
  createdAt: String
  updatedAt: String
}
